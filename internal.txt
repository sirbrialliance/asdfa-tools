-------------------------------------------------------------------------
Tasks
-------------------------------------------------------------------------

- next:
	- a few very simple modules to build and test framework
		- xx user agent
		- take notes
		- show time
	- fancy urls

- base design
	- would like to use JSX + Less CSS + full fancy URLs
		- will need web worker/lambda to take the url and serve the right resource
		- html is static, most function is JS code or a specific api call (not done by default root page load)
		- use grunt?

	- individual modules expand when clicked and just update the hash
		- (though I guess we could have nice urls and then put duplicates on s3 to present the same base code)
- page load
	- "Loading it, the page..."
	- noscript: "Testing complete. Test: Does this browser support JavaScript? Result: It does not."


- base framework
	- modules

- https://web.tools/, asdfa.io?

- credits/licenses
	- https://github.com/developit/hazelnut/blob/master/LICENSE

-------------------------------------------------------------------------
Ideas
-------------------------------------------------------------------------

- framework/base
	- add http/2+ server push for required resources
		- add header "Link: </foo.js>; rel=preload; as=script, </link2...."
		- as=https://fetch.spec.whatwg.org/#concept-request-destination
	- design: logo showing asdf a on keybaord to hint origin and help remind
	- Hit url for non extant module sends 404 but page loaded shows search based on what you tried
	- Source on GitHub, pull requests welcome
		- License is public domain like if you just grab some module code as an example and use it
		- Each module has view source button for tsx or resulting (formatted+commented) js.

- modules
	- Touch/multitouch
	- midi
	- controller inputs (and haptics?)
	- Webgl and feature tests
	- Wasm test
	- Camera/mic check (and pick from multiple sources)
		- can we do slow-mo capture?
	- Basic speaker test, select an output, pan to any speaker (even past l/r)
	- List out all identifiable data we can did out of you browser.
	- Network tests:
		- Latency to assorted targets, dns lookup latency
		- (and use metrics to get page load times/etc)
		- bandwidth+latency test (open a handful of connections to local CloudFlare node running web workers, graph results and measure latency as you go, full duplex)
	- jot down notes, saved in browser, can export/import
		- bonus: option to save data by unique, random user key, keep changes on server for a week, other browsers with same key update their notes from sever ("No expectation of privacy", liability terms)
		- bonus: log into an oauth, like Google, and we'll save the data on their server
	- maybe have links to repl.it
	- IP, user agent, local ip, server ip, other such data we can glean from server or client
	- My favorite computer porgrams/settings
		- .bashrc (history writing, colors, autocompletion)
		- Altdrag, clasic start menu, greenshot, superf4, wirtuawin, console (2 or z)
			- any good porfile settings I tweak, or a .zip
	- Speech api test
	- Web workers test? Is that even useful?
	- Web serial?
	- Web bluetooth?
	- Other special browser apis?
	- link to browser spectre tests
	- New/exotic image formats (jpeg2000, apng, webp, flif, avif, jxl, etc.)
	- Color space, hdr check/test
	- Simple binary viewer/editor
	- Unicode codepoint lookup, also ASCII lookup
	- Random number, lines shuffle, using rand() with link to random.org
	- time.is
	- Tar command line builder (and xkcd joke)
	- file hash calculation (drag and drop, automatically states if hashes match (or if they are exactly binary equal), or better yet, if the aren't equal calculate a number of hashes and warn about any collisions, or if just doing sums warn about slimiar not not exact hashes (esp. if more than 1 start or end chars match))
	- quick lookup for port numbers, mime-types
	- quick search box that starts focused, type a few letters of the module you want to interact, hit enter
	- load a remote site (as server), render image or pdf, show load timings, link to load speed sites, pick a place to request from?, inject cookies or headers?
		- and/or basic curl-style tester
		- needs rate/bandwidth/cpu limit
	- http "connect to any port" test (link)
	- post+cookies+other storage data endpoint/echo
	- quick api reference, for example rmemberinf in python you make a directory with os.mkdir
	- http status: what http proocol we used to load the page (e.g. http/3)
		- https://gf.dev/http3-test



